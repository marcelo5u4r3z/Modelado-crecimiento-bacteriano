import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

st.set_page_config(page_title="Modelado de crecimiento bacteriano", layout="centered")

st.title("üß´ Modelado de crecimiento bacteriano")
st.subheader("UC: Lenguaje en las aplicaciones de la matem√°tica")
st.markdown("""
**Por Adil√© Fiorelli, Adri√°n Leiva, Daniel Techeira y Victoria Pereira.**

Este simulador compara la **soluci√≥n anal√≠tica y num√©rica** del modelo log√≠stico de crecimiento poblacional.  
Ingres√° los valores iniciales para observar la evoluci√≥n de la poblaci√≥n en el tiempo.
""")

# Entradas del usuario
Po = st.number_input("üîπ Poblaci√≥n inicial P‚ÇÄ (en t = 0)", min_value=1, value=100)
P1 = st.number_input("üîπ Poblaci√≥n en t = 1", min_value=1, value=120)
K = st.number_input("üîπ Capacidad de carga K", min_value=Po + 1, value=500)

# Validaci√≥n b√°sica
if Po >= K or P1 >= K:
    st.error("‚ö†Ô∏è La poblaci√≥n inicial y P(1) deben ser menores que la capacidad de carga K.")
else:
    # C√°lculo de constantes
    C = Po / (K - Po)
    try:
        r = np.log(P1 / (C * (K - P1)))
    except:
        st.error("‚ùå Error al calcular la tasa de crecimiento. Verific√° los valores ingresados.")
        st.stop()

    # Definici√≥n del modelo log√≠stico
    def modelo_logistico(t, P):
        return r * P * (1 - P / K)

    # Soluci√≥n num√©rica
    t_span = (0, 10)
    t_eval = np.linspace(*t_span, 200)
    sol_num = solve_ivp(modelo_logistico, t_span, [Po], t_eval=t_eval)

    # Soluci√≥n anal√≠tica
    sol_analitica = (K * C * np.exp(r * t_eval)) / (1 + C * np.exp(r * t_eval))

    # Mostrar tasa de crecimiento
    st.markdown(f"‚úÖ **Tasa de crecimiento estimada (r):** `{r:.4f}`")

    # Gr√°fico
    fig, ax = plt.subplots()
    ax.plot(t_eval, sol_analitica, 'r-', label='Soluci√≥n anal√≠tica')
    ax.plot(sol_num.t, sol_num.y[0], 'k.', label='Soluci√≥n num√©rica')
    ax.set_xlabel("Tiempo")
    ax.set_ylabel("Poblaci√≥n")
    ax.set_title("Crecimiento poblacional log√≠stico")
    ax.grid(True)
    ax.legend()

    st.pyplot(fig)
